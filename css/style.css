@import url(../css/bootstrap.min.css);
/* importa o jeet grid */
/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Perform a value into a percentage value.
 * @param {number} $value - The value which should be converted.
 * @returns {number} $value - The percentage.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/* Gradientes */
/* Converte px para rem em fontes */
/*
SVG com fallback para PNG

Como usar:
body {
  @include background-image('pattern');
}
*/
/* Opacidade crossbrowser

Como usar:
.faded-text {
  @include opacity(0.8);
}

*/
/* Google fonts */
/* fontes do projeto */
@font-face {
  font-family: 'proxima_light';
  src: url("../fonts/proxima-light.eot");
  src: url("../fonts/proxima-light.eot?#iefix") format("embedded-opentype"), url("../fonts/proxima-light.woff2") format("woff2"), url("../fonts/proxima-light.woff") format("woff"), url("../fonts/proxima-light.ttf") format("truetype"), url("../fonts/proxima-light.svg#proxima_light") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'proxima_regular';
  src: url("../fonts/proxima-regular.eot");
  src: url("../fonts/proxima-regular.eot?#iefix") format("embedded-opentype"), url("../fonts/proxima-regular.woff2") format("woff2"), url("../fonts/proxima-regular.woff") format("woff"), url("../fonts/proxima-regular.ttf") format("truetype"), url("../fonts/proxima-regular.svg#proxima_regular") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'proxima_bold';
  src: url("../fonts/proxima-bold.eot");
  src: url("../fonts/proxima-bold.eot?#iefix") format("embedded-opentype"), url("../fonts/proxima-bold.woff2") format("woff2"), url("../fonts/proxima-bold.woff") format("woff"), url("../fonts/proxima-bold.ttf") format("truetype"), url("../fonts/proxima-bold.svg#proxima_bold") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'proxima_semibold';
  src: url("../fonts/proxima-semibold.eot");
  src: url("../fonts/proxima-semibold.eot?#iefix") format("embedded-opentype"), url("../fonts/proxima-semibold.woff2") format("woff2"), url("../fonts/proxima-semibold.woff") format("woff"), url("../fonts/proxima-semibold.ttf") format("truetype"), url("../fonts/proxima-semibold.svg#proxima_semibold") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'proxima_extrabold';
  src: url("../fonts/proxima-extrabold.eot");
  src: url("../fonts/proxima-extrabold.eot?#iefix") format("embedded-opentype"), url("../fonts/proxima-extrabold.woff2") format("woff2"), url("../fonts/proxima-extrabold.woff") format("woff"), url("../fonts/proxima-extrabold.ttf") format("truetype"), url("../fonts/proxima-extrabold.svg#proxima_extrabold") format("svg");
  font-weight: normal;
  font-style: normal; }
.container {
  width: auto;
  max-width: 1050px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0; }

.header {
  float: left;
  clear: none;
  width: 100%;
  margin-left: 0;
  margin-right: 3%; }
  .header:last-child {
    margin-right: 0; }

.box-form {
  width: auto;
  max-width: 620px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0;
  margin-top: 40px; }
  .box-form img {
    float: left; }
  .box-form form {
    float: left;
    clear: none;
    width: 62.23333%;
    margin-left: 0;
    margin-right: 3%;
    float: right; }
    .box-form form:last-child {
      margin-right: 0; }
  .box-form label {
    float: left;
    clear: none;
    width: 100%;
    margin-left: 0;
    margin-right: 3%;
    font-family: "proxima_regular";
    font-size: 12px;
    text-transform: uppercase;
    margin-bottom: 10px; }
    .box-form label:last-child {
      margin-right: 0; }
  .box-form input[type=text] {
    float: left;
    clear: none;
    width: 100%;
    margin-left: 0;
    margin-right: 3%;
    border: solid 1px #ddd9d4;
    border-radius: 3px;
    padding: 10px;
    color: black;
    font-family: "proxima_regular";
    font-size: 18px;
    margin-top: 5px;
    box-shadow: 0px 1px 0px 0px #D94E4C; }
    .box-form input[type=text]:last-child {
      margin-right: 0; }
    .box-form input[type=text]:focus {
      border: solid 2px yellow; }
  .box-form input[type=submit] {
    float: left;
    clear: none;
    width: 100%;
    margin-left: 0;
    margin-right: 3%;
    border: solid 1px #ddd9d4;
    border-radius: 3px;
    padding: 10px;
    color: black;
    font-family: "proxima_bold";
    font-size: 16px;
    margin-top: 5px;
    background: #fff;
    color: #f77274;
    box-shadow: 0px 1px 0px 0px #D94E4C; }
    .box-form input[type=submit]:last-child {
      margin-right: 0; }

.modal {
  display: none;
  width: 800px;
  height: 480px;
  position: absolute;
  left: 0;
  top: 0;
  background: #ea5653;
  z-index: 9900;
  padding: 10px;
  border-radius: 8px;
  color: #fff;
  font-family: "proxima_regular"; }
  .modal h2 {
    font-family: "proxima_semibold";
    text-align: center;
    font-size: 43px;
    font-size: 2.6875rem;
    letter-spacing: -0.03em;
    color: #fff;
    margin-top: 10px; }
  .modal p {
    width: auto;
    max-width: 500px;
    float: none;
    display: block;
    margin-right: auto;
    margin-left: auto;
    padding-left: 0;
    padding-right: 0;
    font-family: "proxima_regular";
    text-align: center;
    font-size: 28px;
    font-size: 1.75rem;
    color: #fff;
    font-weight: normal; }

#mask {
  display: none;
  position: absolute;
  left: 0;
  top: 0;
  z-index: 1000;
  background-color: #000;
  width: 100%; }

.fechar {
  display: block;
  text-align: right;
  padding: 10px; }

/*# sourceMappingURL=style.css.map */
